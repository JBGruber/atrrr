% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/firehose.R
\name{stream_firehose}
\alias{stream_firehose}
\title{Stream from the Bluesky Firehose}
\usage{
stream_firehose(fun, timeout = 30)
}
\arguments{
\item{fun}{a function that takes events from the Bluesky Firehose and processes them. See examples.}

\item{timeout}{how long to stream from the Bluesky Firehose. Can be \code{Inf} to keep streaming until interrupted.}
}
\value{
nothing itself, used to run \code{fun}
}
\description{
Stream from the Bluesky Firehose
}
\examples{
\dontshow{if (rlang::is_installed("libipldr")) withAutoprint(\{ # examplesIf}
# an example function that saves events as RDS files
stream2rds <- function(events) {
  for (event in events) {
    commit <- event$commit
    # ignore events without a commit message
    if (!is.null(commit)) {
      saveRDS(event, paste0(event$commit, ".rds"), compress = FALSE)
    }
  }
}
stream_firehose(stream2rds, timeout = 15)

# an example function that saves events as JSON files
stream2json <- function(events) {
  for (event in events) {
    commit <- event$commit
    # ignore events without a commit message
    if (!is.null(commit)) {
      jsonlite::write_json(event, file(paste0(event$commit, ".json")), pretty = TRUE)
    }
  }
}
stream_firehose(stream2json, timeout = 15)

# an example function that prints posts to the Console
print_stream <- function(events) {
  for (event in events) {
    commit <- event$commit
    # ignore events without a commit message
    if (is.null(commit)) next
    # decode actual block data which contains text
    event$data <- libipldr::decode_car(event$blocks)$blocks
    message <- purrr::map(event$data, "text", .default = NULL) |>
      purrr::compact()
    if (length(message) == 0L) next
    print(cli::boxx(message, background_col = sample(colors(), 1L)))
  }
}
stream_firehose(print_stream, timeout = 15)
\dontshow{\}) # examplesIf}
}
